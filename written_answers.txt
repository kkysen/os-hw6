Answers for parts  1 - 5
Enter your answers in the designated location. Do NOT remove lines that start
with '=' signs. Removing these lines will break our grading scrips and will
result in 0 points. Also, keep lines to a max of 80 chars long (you do not
need to worry if the top command is longer than 80 chars). Also, please limit
your answers to about 40 words.

================================== P1Q1 start ==================================
Describe how you created the 70%/30% split. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - Include the top output

    /* TODO */ 

=================================== P1Q1 end ===================================

================================== P1Q2 start ==================================
Describe how you created a real-time priority task.
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - Include the top output

    /* TODO */ 

=================================== P1Q2 end ===================================



================================== P2Q1 start ==================================
The output of diff or diffconfig when comparing the config files for your 
mainline fallback kernel and your MuQSS kernel

-ANDROID_BINDERFS n
-ANDROID_BINDER_DEVICES "binder"
-ANDROID_BINDER_IPC_SELFTEST n
-BPF_UNPRIV_DEFAULT_OFF y
-CFS_BANDWIDTH y
-CGROUP_CPUACCT y
-FAIR_GROUP_SCHED y
-INTEL_IOMMU_DEFAULT_OFF n
-INTEL_IOMMU_DEFAULT_ON_INTGPU_OFF y
-LOCK_DOWN_IN_EFI_SECURE_BOOT y
-MTD_PSTORE n
-NUMA_BALANCING y
-NUMA_BALANCING_DEFAULT_ENABLED y
-PSTORE_BLK m
-PSTORE_BLK_BLKDEV ""
-PSTORE_BLK_KMSG_SIZE 64
-PSTORE_BLK_MAX_REASON 2
-PSTORE_ZONE m
-RESET_BRCMSTB_RESCAL n
-RT_GROUP_SCHED n
-SCHED_AUTOGROUP y
-SECURITY_PERF_EVENTS_RESTRICT y
-X86_X32_DISABLED y
-XILINX_ZYNQMP_DPDMA n
 ANDROID_BINDER_IPC m -> n
 ASHMEM m -> n
 BLK_DEV_LOOP m -> y
 CC_VERSION_TEXT "gcc-10 (Debian 10.2.1-6) 10.2.1 20210110" -> "gcc (Debian 10.2.1-6) 10.2.1 20210110"
 LOCALVERSION "" -> "-ajr2252-muqss"
 SYSTEM_TRUSTED_KEYS "debian/certs/debian-uefi-certs.pem" -> ""
 USB_COMMON m -> y
+BATTERY_RT5033 n
+FB_NVIDIA n
+FB_RIVA n
+NTFS_FS n
+RQ_ALL n
+RQ_MC y
+RQ_MC_LLC n
+RQ_NONE n
+RQ_SMP n
+RQ_SMT n
+SCHED_MUQSS y
+SHARERQ 2
+SMT_NICE y
+SYSTEM_REVOCATION_LIST n
+VIDEO_VS6624 n

=================================== P2Q1 end ===================================

================================== P2Q2 start ==================================
Indicate you successfully patched, built, and booted into your MuQSS-enabled 
Linux kernel.

Successfully patched, built, and booted into the MuQSS-enabled Linux kernel.
The following is the output to sudo dmesg | grep "MuQSS"

[    0.159554] MuQSS possible/present/online CPUs: 128/2/2
[    0.159555] MuQSS locality CPU 0 to 0: 0
[    0.159555] MuQSS locality CPU 0 to 1: 4
[    0.159555] MuQSS locality CPU 1 to 0: 4
[    0.159556] MuQSS locality CPU 1 to 1: 0
[    0.159564] MuQSS CPU 0 llc 0 RQ order 0 RQ 0 llc 0
[    0.159564] MuQSS CPU 0 llc 0 RQ order 1 RQ 1 llc 2
[    0.159565] MuQSS CPU 1 llc 2 RQ order 0 RQ 1 llc 2
[    0.159565] MuQSS CPU 1 llc 2 RQ order 1 RQ 0 llc 0
[    0.159566] MuQSS CPU 0 llc 0 CPU order 0 RQ 0 llc 0
[    0.159566] MuQSS CPU 0 llc 0 CPU order 1 RQ 1 llc 2
[    0.159567] MuQSS CPU 1 llc 2 CPU order 0 RQ 1 llc 2
[    0.159567] MuQSS CPU 1 llc 2 CPU order 1 RQ 0 llc 0
[    0.159567] MuQSS runqueue share type MC total runqueues: 2
[    9.019688] MuQSS CPU scheduler v0.205 by Con Kolivas.

=================================== P2Q2 end ===================================



================================== P3Q1 start ==================================
Describe how you created the 70%/30% split. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - How were the results different from P1Q1, if at all.

    /* TODO */

=================================== P3Q1 end ===================================

================================== P3Q2 start ==================================
Describe how you created a real-time priority task. 
    - Include the command lines you executed
    - Indicate if you needed root privileges for any of those commands
    - How were the results different from P1Q2, if at all.

    /* TODO */ 

=================================== P3Q2 end ===================================

================================== P3Q3 start ==================================
MuQSS features unprivileged real-time tasks. Perform the previous task with and
without root privileges, and describe the differences. 

    /* TODO */

=================================== P3Q3 end ===================================



================================== P4Q1 start ==================================
Verify Con Kolivas' claim by timing the kernel build-time in both your fallback
and your MuQSS-patched kernels.
    
Our experiment was to continuously play Youtube videos at high-quality -- specifically, we played
a playlist of talk show and music videos on Youtube -- in the background
on the VM while the kernel was building. We ran time using the make -j2 command to test these.
Our command was "sudo /usr/bin/time -f "\t%U user,\t%S system,\t%x status" make -j2."

Time for the MuQSS-patched kernel: 139.86 user,    25.29 system,   0 status
Time for the fallback kernel: 145.64 user,    41.50 system,   0 status

From the results we can see that the experiment validated Con Kolivas' claim that the kernel
compile time was faster. Although the results were similar for the program in user mode
(although the MuQss version was still lower), we can see that the time in kernel mode was improved
with the MuQSS version, cutting down by almost half (41.50 to 25.29).

=================================== P4Q1 end ===================================

================================== P4Q2 start ==================================
Design an experiment that you think will highlight MuQSS’s strength. Perform 
the experiment and report your findings.

    /* TODO */ 

=================================== P4Q2 end ===================================



================================== P5Q1 start ==================================
Briefly describe the advantages and disadvantages of a larger HZ.

    /* TODO */ 

=================================== P5Q1 end ===================================

================================== P5Q2 start ==================================
What is the HZ currently configured for your running Linux system?

    /* TODO */ 

=================================== P5Q2 end ===================================

================================== P5Q3 start ==================================
What are jiffies? Explain the relationship between jiffies, HZ, and time.

    /* TODO */ 

=================================== P5Q3 end ===================================

================================== P5Q4 start ==================================
Find the current value of jiffies in your system.
    - In minutes, how much time does this jiffies value represent?
    - Does it match the uptime reported by the uptime command? (Hint: it 
      doesn’t.) Please give the formula to convert jiffies to the current 
      (real) uptime, in minutes.
    - Why does this large difference exist? (Hint: in 32-bit Linux systems,
      jiffies is a 32-bit value.)

    /* TODO */ 

=================================== P5Q4 end ===================================

================================== P5Q5 start ==================================
What are Niffies? How do they differ from Jiffies?

    /* TODO */ 

=================================== P5Q5 end ===================================